package com.qa.baetraining.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.web.servlet.MockMvc;

import com.qa.baetraining.domain.*;
import com.fasterxml.jackson.databind.ObjectMapper;


@SpringBootTest
@AutoConfigureMockMvc

@Sql(scripts = {"classpath:testSchema.sql", "classpath:testdata.sql"}, executionPhase = ExecutionPhase.BEFORE_TEST_METHOD)

@ActiveProfiles("test")
public class UserControllerIntegrationTest {
	
	@Autowired
	private MockMvc mvc;
	
	@Autowired
	private ObjectMapper mapper;
	
	@Test
	public void getAllTest() throws Exception {
		User user = new User(1L, "Dan", "Daniels", "Cheese", 65);
		List<User> output = new ArrayList<>();
		output.add(user);
		String outputAsJSON = mapper.writeValueAsString(output);
		
		mvc.perform(get("/allUsers")
				.contentType(MediaType.APPLICATION_JSON))
		.andExpect(status().isOk())
		.andExpect(content().json(outputAsJSON));
	}


	@Test
	public void createTest() throws Exception {
		User entry = new User("Jimmy", "dd", "ddd", 5);
		String entryAsJSON = mapper.writeValueAsString(entry);
		
		User result = new User(2L, "Jimmy", "dd", "ddd", 5);
		String resultAsJSON = mapper.writeValueAsString(result);
		
		mvc.perform(post("/addUser")
				.contentType(MediaType.APPLICATION_JSON)
				.content(entryAsJSON))
		.andExpect(status().isResetContent())
		.andExpect(content().json(resultAsJSON));
	}
	@Test
	public void updateTest() throws Exception {
		User updated = new User("Jimmy", "updated", "ddd", 5);
		String updatedAsJSON = mapper.writeValueAsString(updated);
		
		User updateResult = new User(1L, "Jimmy", "updated", "ddd", 5);
		String resultAsJSON = mapper.writeValueAsString(updateResult);
		
		mvc.perform(put("/updateUser/1")
				.contentType(MediaType.APPLICATION_JSON)
				.content(updatedAsJSON))
		.andExpect(status().isCreated())
		.andExpect(content().json(resultAsJSON));
	}
	

}












